From ce7066867c5aa873e1acba8294173765b368c227 Mon Sep 17 00:00:00 2001
From: Kyle Bader <kyle.bader94@gmail.com>
Date: Thu, 26 Jun 2025 20:36:55 -0600
Subject: [PATCH 1/6] tty/serial_core - Serial Core FIFO Control

    Initial serial_core implementation for kernel level fifo_control
in UART drivers (eg. 8250).

    * Add struct uart_fifo_control w/:
	- FIFO enable/disable & flush flags
	- Rx FIFO trigger level
	- Tx FIFO trigger level
	- Rx FIFO timeout

    * Adds two new uart_ops
	- (*set_fifo_control)
        - (*get_fifo_control)

    * Add sysfs interfaces
	- move rx_trig_bytes to serial_core
	- tx_trig_bytes
	- fifo_enable_rx
	- fifo_enable_tx
	- dma_mode
	- flush_rx
	- fluxh_tx

    Sysfs sends struct uart_fifo_control to
new uart_ops.
---
 drivers/tty/serial/serial_core.c | 253 +++++++++++++++++++++++++++++++
 include/linux/serial_core.h      |   5 +
 include/linux/serial_fifo.h      |  22 +++
 3 files changed, 280 insertions(+)
 create mode 100644 include/linux/serial_fifo.h

diff --git a/drivers/tty/serial/serial_core.c b/drivers/tty/serial/serial_core.c
index 1f7708a91fc6..0577024cc70b 100644
--- a/drivers/tty/serial/serial_core.c
+++ b/drivers/tty/serial/serial_core.c
@@ -22,6 +22,7 @@
 #include <linux/seq_file.h>
 #include <linux/device.h>
 #include <linux/serial.h> /* for serial_state and serial_icounter_struct */
+#include <linux/serial_fifo.h> /* for fifo control */
 #include <linux/serial_core.h>
 #include <linux/sysrq.h>
 #include <linux/delay.h>
@@ -3064,6 +3065,243 @@ static ssize_t console_store(struct device *dev,
 	return count;
 }
 
+static inline struct uart_fifo_control uart_get_current_fctl(struct uart_port *uport, int *ret)
+{
+	struct uart_fifo_control ctl;
+
+	if (!uport->ops->get_fifo_control) {
+		*ret = -EOPNOTSUPP;
+		return (struct uart_fifo_control){ 0 };
+	}
+
+	*ret = uport->ops->get_fifo_control(uport, &ctl);
+	return ctl;
+}
+
+static inline int uart_apply_fctl(struct uart_port *uport, struct uart_fifo_control *ctl)
+{
+	if (!uport->ops->set_fifo_control)
+		return -EOPNOTSUPP;
+
+	return uport->ops->set_fifo_control(uport, ctl);
+}
+
+static ssize_t rx_trig_bytes_show(struct device *dev,
+                                  struct device_attribute *attr, char *buf)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	int ret;
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+	return sysfs_emit(buf, "%u\n", ctl.rx_trigger_bytes);
+}
+
+static ssize_t rx_trig_bytes_store(struct device *dev,
+                                   struct device_attribute *attr,
+                                   const char *buf, size_t count)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	u32 val;
+	int ret = kstrtou32(buf, 0, &val);
+	if (ret)
+		return ret;
+
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+
+	ctl.rx_trigger_bytes = val;
+	ret = uart_apply_fctl(uport, &ctl);
+	return ret ? ret : count;
+}
+
+static ssize_t tx_trig_bytes_show(struct device *dev,
+                                  struct device_attribute *attr, char *buf)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	int ret;
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+	return sysfs_emit(buf, "%u\n", ctl.tx_trigger_bytes);
+}
+
+static ssize_t tx_trig_bytes_store(struct device *dev,
+                                   struct device_attribute *attr,
+                                   const char *buf, size_t count)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	u32 val;
+	int ret = kstrtou32(buf, 0, &val);
+	if (ret)
+		return ret;
+
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+
+	ctl.tx_trigger_bytes = val;
+	ret = uart_apply_fctl(uport, &ctl);
+	return ret ? ret : count;
+}
+
+static ssize_t fifo_enable_rx_show(struct device *dev,
+                                   struct device_attribute *attr, char *buf)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	int ret;
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+	return sysfs_emit(buf, "%u\n", !!(ctl.flags & UART_FIFO_CTRL_FLAG_ENABLE_RX));
+}
+
+static ssize_t fifo_enable_rx_store(struct device *dev,
+                                    struct device_attribute *attr,
+                                    const char *buf, size_t count)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	bool enable;
+	int ret = kstrtobool(buf, &enable);
+	if (ret)
+		return ret;
+
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+
+	if (enable)
+		ctl.flags |= UART_FIFO_CTRL_FLAG_ENABLE_RX;
+	else
+		ctl.flags &= ~UART_FIFO_CTRL_FLAG_ENABLE_RX;
+
+	ret = uart_apply_fctl(uport, &ctl);
+	return ret ? ret : count;
+}
+
+static ssize_t fifo_enable_tx_show(struct device *dev,
+                                   struct device_attribute *attr, char *buf)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	int ret;
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+	return sysfs_emit(buf, "%u\n", !!(ctl.flags & UART_FIFO_CTRL_FLAG_ENABLE_TX));
+}
+
+static ssize_t fifo_enable_tx_store(struct device *dev,
+                                    struct device_attribute *attr,
+                                    const char *buf, size_t count)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	bool enable;
+	int ret = kstrtobool(buf, &enable);
+	if (ret)
+		return ret;
+
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+
+	if (enable)
+		ctl.flags |= UART_FIFO_CTRL_FLAG_ENABLE_TX;
+	else
+		ctl.flags &= ~UART_FIFO_CTRL_FLAG_ENABLE_TX;
+
+	ret = uart_apply_fctl(uport, &ctl);
+	return ret ? ret : count;
+}
+
+static ssize_t dma_mode_show(struct device *dev,
+                             struct device_attribute *attr, char *buf)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	int ret;
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+	return sysfs_emit(buf, "%u\n", !!(ctl.flags & UART_FIFO_CTRL_FLAG_DMA_MODE));
+}
+
+static ssize_t dma_mode_store(struct device *dev,
+                              struct device_attribute *attr,
+                              const char *buf, size_t count)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	bool enable;
+	int ret = kstrtobool(buf, &enable);
+	if (ret)
+		return ret;
+
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+
+	if (enable)
+		ctl.flags |= UART_FIFO_CTRL_FLAG_DMA_MODE;
+	else
+		ctl.flags &= ~UART_FIFO_CTRL_FLAG_DMA_MODE;
+
+	ret = uart_apply_fctl(uport, &ctl);
+	return ret ? ret : count;
+}
+
+static ssize_t flush_rx_store(struct device *dev,
+                              struct device_attribute *attr,
+                              const char *buf, size_t count)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	int ret;
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+
+	ctl.flags |= UART_FIFO_CTRL_FLAG_FLUSH_RX;
+	ret = uart_apply_fctl(uport, &ctl);
+	return ret ? ret : count;
+}
+
+static ssize_t flush_tx_store(struct device *dev,
+                              struct device_attribute *attr,
+                              const char *buf, size_t count)
+{
+	struct tty_port *port = dev_get_drvdata(dev);
+	struct uart_state *state = container_of(port, struct uart_state, port);
+	struct uart_port *uport = state->uart_port;
+	int ret;
+	struct uart_fifo_control ctl = uart_get_current_fctl(uport, &ret);
+	if (ret)
+		return ret;
+
+	ctl.flags |= UART_FIFO_CTRL_FLAG_FLUSH_TX;
+	ret = uart_apply_fctl(uport, &ctl);
+	return ret ? ret : count;
+}
+
 static DEVICE_ATTR_RO(uartclk);
 static DEVICE_ATTR_RO(type);
 static DEVICE_ATTR_RO(line);
@@ -3079,6 +3317,14 @@ static DEVICE_ATTR_RO(iomem_base);
 static DEVICE_ATTR_RO(iomem_reg_shift);
 static DEVICE_ATTR_RW(console);
 
+static DEVICE_ATTR_RW(rx_trig_bytes);
+static DEVICE_ATTR_RW(tx_trig_bytes);
+static DEVICE_ATTR_RW(fifo_enable_rx);
+static DEVICE_ATTR_RW(fifo_enable_tx);
+static DEVICE_ATTR_RW(dma_mode);
+static DEVICE_ATTR_WO(flush_rx);
+static DEVICE_ATTR_WO(flush_tx);
+
 static struct attribute *tty_dev_attrs[] = {
 	&dev_attr_uartclk.attr,
 	&dev_attr_type.attr,
@@ -3094,6 +3340,13 @@ static struct attribute *tty_dev_attrs[] = {
 	&dev_attr_iomem_base.attr,
 	&dev_attr_iomem_reg_shift.attr,
 	&dev_attr_console.attr,
+	&dev_attr_rx_trig_bytes.attr,
+	&dev_attr_tx_trig_bytes.attr,
+	&dev_attr_fifo_enable_rx.attr,
+	&dev_attr_fifo_enable_tx.attr,
+	&dev_attr_dma_mode.attr,
+	&dev_attr_flush_rx.attr,
+	&dev_attr_flush_tx.attr,
 	NULL
 };
 
diff --git a/include/linux/serial_core.h b/include/linux/serial_core.h
index 914b5e97e056..b3e148e5bee6 100644
--- a/include/linux/serial_core.h
+++ b/include/linux/serial_core.h
@@ -28,6 +28,7 @@
 #endif
 
 struct uart_port;
+struct uart_fifo_control;
 struct serial_struct;
 struct serial_port_device;
 struct device;
@@ -399,6 +400,10 @@ struct uart_ops {
 	void		(*config_port)(struct uart_port *, int);
 	int		(*verify_port)(struct uart_port *, struct serial_struct *);
 	int		(*ioctl)(struct uart_port *, unsigned int, unsigned long);
+	int     	(*set_fifo_control)(struct uart_port *port,
+                            		const struct uart_fifo_control *ctl);
+    int 		(*get_fifo_control)(struct uart_port *port,
+                            		struct uart_fifo_control *ctl);
 #ifdef CONFIG_CONSOLE_POLL
 	int		(*poll_init)(struct uart_port *);
 	void		(*poll_put_char)(struct uart_port *, unsigned char);
diff --git a/include/linux/serial_fifo.h b/include/linux/serial_fifo.h
new file mode 100644
index 000000000000..4db0094f80f5
--- /dev/null
+++ b/include/linux/serial_fifo.h
@@ -0,0 +1,22 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _UAPI_LINUX_SERIAL_FIFO_H
+#define _UAPI_LINUX_SERIAL_FIFO_H
+
+#include <linux/types.h>
+
+/* Flag Masks */
+#define UART_FIFO_CTRL_FLAG_ENABLE_RX     (1 << 0)
+#define UART_FIFO_CTRL_FLAG_ENABLE_TX     (1 << 1)
+#define UART_FIFO_CTRL_FLAG_FLUSH_RX      (1 << 2)
+#define UART_FIFO_CTRL_FLAG_FLUSH_TX      (1 << 3)
+#define UART_FIFO_CTRL_FLAG_DMA_MODE      (1 << 4)
+
+struct uart_fifo_control {
+	__u64 flags;               /* Bitmask for enable/flush/options */
+	__u32 rx_trigger_bytes;    /* RX FIFO level */
+	__u32 tx_trigger_bytes;    /* Reserved */
+	__u32 rx_timeout_ms;       /* Reserved */
+	__u32 reserved;            /* Reserved for future extensions */
+};
+
+#endif /* _UAPI_LINUX_SERIAL_FIFO_H */
-- 
2.48.1

