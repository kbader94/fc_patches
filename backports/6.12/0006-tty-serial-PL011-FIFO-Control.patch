From 60e029b2ca54fc4f1c737ca975c34feae6b5db03 Mon Sep 17 00:00:00 2001
From: Kyle Bader <kyle.bader94@gmail.com>
Date: Tue, 22 Jul 2025 11:00:34 -0600
Subject: [PATCH 6/6] tty/serial - PL011 FIFO Control

---
 drivers/tty/serial/amba-pl011.c | 108 +++++++++++++++++++++++++++++++-
 1 file changed, 107 insertions(+), 1 deletion(-)

diff --git a/drivers/tty/serial/amba-pl011.c b/drivers/tty/serial/amba-pl011.c
index 7d0134ecd82f..586a59e21d30 100644
--- a/drivers/tty/serial/amba-pl011.c
+++ b/drivers/tty/serial/amba-pl011.c
@@ -41,6 +41,7 @@
 #include <linux/sizes.h>
 #include <linux/io.h>
 #include <linux/acpi.h>
+#include <linux/serial_fifo.h>
 
 #define UART_NR			14
 
@@ -83,6 +84,22 @@ enum {
 	REG_ARRAY_SIZE,
 };
 
+static const u32 pl011_ifls_rx_bits[] = {
+    UART011_IFLS_RX1_8,
+    UART011_IFLS_RX2_8,
+    UART011_IFLS_RX4_8,
+    UART011_IFLS_RX6_8,
+    UART011_IFLS_RX7_8,
+};
+
+static const u32 pl011_ifls_tx_bits[] = {
+    UART011_IFLS_TX7_8,
+    UART011_IFLS_TX6_8,
+    UART011_IFLS_TX4_8,
+    UART011_IFLS_TX2_8,
+    UART011_IFLS_TX1_8,
+};
+
 static u16 pl011_std_offsets[REG_ARRAY_SIZE] = {
 	[REG_DR] = UART01x_DR,
 	[REG_FR] = UART01x_FR,
@@ -108,12 +125,15 @@ struct vendor_data {
 	unsigned int		fr_cts;
 	unsigned int		fr_ri;
 	unsigned int		inv_fr;
+	unsigned char 		rx_trig_bytes[5];
+	unsigned char 		tx_trig_bytes[5];
 	bool			access_32b;
 	bool			oversampling;
 	bool			dma_threshold;
 	bool			cts_event_workaround;
 	bool			always_enabled;
 	bool			fixed_options;
+	struct uart_fifo_control 	fifo_control;
 
 	unsigned int (*get_fifosize)(struct amba_device *dev);
 };
@@ -130,6 +150,13 @@ static struct vendor_data vendor_arm = {
 	.fr_dsr			= UART01x_FR_DSR,
 	.fr_cts			= UART01x_FR_CTS,
 	.fr_ri			= UART011_FR_RI,
+	.rx_trig_bytes		= {4,8,16,24,28},
+	.tx_trig_bytes		= {28,24,16,8,4},
+	.fifo_control = {
+			.flags 			= UART_FIFO_CTRL_FLAG_ENABLE_RX | 
+							  UART_FIFO_CTRL_FLAG_ENABLE_TX  ,
+			.rx_trigger_bytes = 8	
+	},
 	.oversampling		= false,
 	.dma_threshold		= false,
 	.cts_event_workaround	= false,
@@ -204,6 +231,8 @@ static unsigned int get_fifosize_st(struct amba_device *dev)
 static struct vendor_data vendor_st = {
 	.reg_offset		= pl011_st_offsets,
 	.ifls			= UART011_IFLS_RX_HALF | UART011_IFLS_TX_HALF,
+	.rx_trig_bytes	= {8,16,32,48,56},
+	.tx_trig_bytes  = {56,48,32,16,8},
 	.fr_busy		= UART01x_FR_BUSY,
 	.fr_dsr			= UART01x_FR_DSR,
 	.fr_cts			= UART01x_FR_CTS,
@@ -263,6 +292,7 @@ struct uart_amba_port {
 	char			type[12];
 	bool			rs485_tx_started;
 	unsigned int		rs485_tx_drain_interval; /* usecs */
+	struct uart_fifo_control 		fifo_control;
 #ifdef CONFIG_DMA_ENGINE
 	/* DMA stuff */
 	unsigned int		dmacr;		/* dma control reg */
@@ -1838,6 +1868,7 @@ static int pl011_startup(struct uart_port *port)
 		goto clk_dis;
 
 	pl011_write(uap->vendor->ifls, uap, REG_IFLS);
+	uap->fifo_control = uap->vendor->fifo_control;
 
 	uart_port_lock_irq(&uap->port);
 
@@ -2074,8 +2105,11 @@ pl011_set_termios(struct uart_port *port, struct ktermios *termios,
 		if (termios->c_cflag & CMSPAR)
 			lcr_h |= UART011_LCRH_SPS;
 	}
-	if (uap->fifosize > 1)
+
+	if (uap->fifosize > 1 && (uap->vendor->fifo_control.flags & UART_FIFO_CTRL_FLAG_ENABLE_RX ))
 		lcr_h |= UART01x_LCRH_FEN;
+	else 
+		lcr_h &= ~UART01x_LCRH_FEN;
 
 	bits = tty_get_frame_size(termios->c_cflag);
 
@@ -2232,6 +2266,76 @@ static int pl011_rs485_config(struct uart_port *port, struct ktermios *termios,
 	return 0;
 }
 
+static int pl011_set_fifo_control(struct uart_port *port,
+                                const struct uart_fifo_control *ctl)
+{
+	struct uart_amba_port *uap = container_of(port, struct uart_amba_port, port);
+	u32 ifls = 0, lcr_h;
+	int txtbi, rxtbi, rx_level_count, tx_level_count = 0;
+	unsigned long flags;
+	
+	if (!uap->vendor->fifo_control)
+		return -EOPNOTSUPP; /* Vendor does not support programmable FIFO */
+
+	if (ctl->rx_trigger_bytes > 0){
+		for (rxtbi = 0; rxtbi < rx_level_count; rxtbi++){
+			if (uap->vendor->rx_trig_bytes[rxtbi] == ctl->rx_trigger_bytes){
+				ifls |= pl011_ifls_rx_bits[rxtbi];
+				break;
+			}		
+		}
+		if (rxtbi == rx_level_count)
+			return -ERANGE; /* Vendor does not support specified FIFO level */
+	}
+
+    if (ctl->tx_trigger_bytes > 0){
+		for (txtbi = 0; txtbi < tx_level_count; txtbi++){
+			if (uap->vendor->tx_trig_bytes[txtbi] == ctl->tx_trigger_bytes){
+				ifls |= pl011_ifls_tx_bits[txtbi];
+				break;
+			}	
+		}
+		if (txtbi == tx_level_count)
+				return -ERANGE;	/* Vendor does not support specifiedFIFO level */
+	}
+
+	uart_port_lock_irqsave(port, &flags);
+
+	lcr_h = pl011_read(uap, REG_LCRH_TX);
+
+	if(ctl->flags & UART_FIFO_CTRL_FLAG_ENABLE_RX)
+		pl011_write(ifls, uap, REG_IFLS);
+	
+	if (uap->fifosize > 1 && (uap->vendor->fifo_control.flags & UART_FIFO_CTRL_FLAG_ENABLE_RX ))
+		lcr_h |= UART01x_LCRH_FEN;
+	else 
+		lcr_h &= ~UART01x_LCRH_FEN;
+
+	pl011_write_lcr_h(uap, lcr_h);
+
+	uap->fifo_control = *ctl;
+	uap->fifo_control.flags &=
+			~(UART_FIFO_CTRL_FLAG_FLUSH_RX | UART_FIFO_CTRL_FLAG_FLUSH_TX);
+	
+	uart_port_unlock_irqrestore(port, flags);
+
+	return 0;
+}
+
+static int pl011_get_fifo_control(struct uart_port *port,
+                                struct uart_fifo_control *ctl)
+{
+	struct uart_amba_port *uap = container_of(port, struct uart_amba_port, port);
+
+	if (!uap->vendor->fifo_control)
+		return -EOPNOTSUPP; /* No FIFO */
+
+	memset(ctl, 0, sizeof(*ctl));
+	*ctl = uap->fifo_control;
+	
+	return 0;
+}
+
 static const struct uart_ops amba_pl011_pops = {
 	.tx_empty	= pl011_tx_empty,
 	.set_mctrl	= pl011_set_mctrl,
@@ -2250,6 +2354,8 @@ static const struct uart_ops amba_pl011_pops = {
 	.type		= pl011_type,
 	.config_port	= pl011_config_port,
 	.verify_port	= pl011_verify_port,
+	.set_fifo_control = pl011_set_fifo_control,
+	.get_fifo_control = pl011_get_fifo_control,
 #ifdef CONFIG_CONSOLE_POLL
 	.poll_init     = pl011_hwinit,
 	.poll_get_char = pl011_get_poll_char,
-- 
2.48.1

