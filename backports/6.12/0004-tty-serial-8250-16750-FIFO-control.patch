From 326841283c08fc5489fd833bde9f1ce03f3180d0 Mon Sep 17 00:00:00 2001
From: Kyle Bader <kyle.bader94@gmail.com>
Date: Sun, 13 Jul 2025 10:26:03 -0600
Subject: [PATCH 4/6] tty/serial/8250 - 16750 FIFO control

    * Modify write_fcr_common to accept 8 FIFO sizes

TODO: Base refactor required:
* move 8250_fifo back to 8250_port.c(except sysfs, keep that in serial_core)

* rmv fifo_control flags for enable tx and FLUSH
---
 drivers/tty/serial/8250/8250_fifo.c | 93 ++++++++++++++++-------------
 drivers/tty/serial/8250/8250_port.c |  8 ++-
 include/linux/serial_fifo.h         |  3 +
 3 files changed, 61 insertions(+), 43 deletions(-)

diff --git a/drivers/tty/serial/8250/8250_fifo.c b/drivers/tty/serial/8250/8250_fifo.c
index fb626ec4ecc2..c55e649eb0eb 100644
--- a/drivers/tty/serial/8250/8250_fifo.c
+++ b/drivers/tty/serial/8250/8250_fifo.c
@@ -4,33 +4,34 @@
 #include "8250.h"
 #include "8250_fifo.h"
 
-static int rx_trig_to_fcr(struct uart_8250_port *up, u32 level)
+/* TODO: move all this to 8250_port.c and rmv below func */
+static void serial8250_clear_fifos(struct uart_8250_port *p)
 {
-	const struct serial8250_config *conf;
-	 
-	conf = &serial8250_uart_config[up->port.type];
-
-	for (int i = 0; i < UART_FCR_R_TRIG_MAX_STATE; i++) {
-		if (conf->rxtrig_bytes[i] && conf->rxtrig_bytes[i] == level)
-			return UART_FCR_R_FROM_TRIG_I(i);
+	if (p->capabilities & UART_CAP_FIFO) {
+		serial_out(p, UART_FCR, UART_FCR_ENABLE_FIFO);
+		serial_out(p, UART_FCR, UART_FCR_ENABLE_FIFO |
+			       UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT);
+		serial_out(p, UART_FCR, 0);
 	}
-
-	return -EINVAL;
 }
 
-static __maybe_unused int fcr_to_rx_trig(struct uart_8250_port *up, u8 fcr)
+/* Supports 1550A-15750 */
+static int rx_trig_to_fcr(struct uart_8250_port *up, u32 level)
 {
 	const struct serial8250_config *conf;
-	int index;
 	 
 	conf = &serial8250_uart_config[up->port.type];
-	index = UART_FCR_R_TRIG_BITS(fcr);
 
-	if (index >= UART_FCR_R_TRIG_MAX_STATE)
-		return -EINVAL;
+	for (int i = 0; i < UART_FCR_R_TRIG_MAX_STATE; i++) {
+		if (conf->rxtrig_bytes[i] && conf->rxtrig_bytes[i] == level) {
+			if (i >= 4)
+				return UART_FCR7_64BYTE | UART_FCR_R_FROM_TRIG_I(i - 4); /* 16750 mode */
+			else
+				return UART_FCR_R_FROM_TRIG_I(i); /* 16550A mode */
+		}
+	}
 
-	return conf->rxtrig_bytes[index] ? conf->rxtrig_bytes[index]
-		: -EOPNOTSUPP;
+	return -EINVAL;
 }
 
 static int tx_trig_to_fcr(struct uart_8250_port *up, u32 level)
@@ -46,39 +47,48 @@ static int tx_trig_to_fcr(struct uart_8250_port *up, u32 level)
 	return -EINVAL;
 }
 
-static int __maybe_unused fcr_to_tx_trig(struct uart_8250_port *up, u8 fcr)
+static int write_fcr_common(struct uart_8250_port *up, 
+							const struct uart_fifo_control *ctl, u8 fcr)
 {
-	const struct serial8250_config *conf = 
-				 &serial8250_uart_config[up->port.type];
-	int index = UART_FCR_T_TRIG_BITS(fcr);
+	unsigned long sl_flags;
+
+	uart_port_lock_irqsave(&up->port, &sl_flags);
 
-	if (index >= UART_FCR_T_TRIG_MAX_STATE)
-		return -EINVAL;
+	serial8250_clear_fifos(up);
 
-	return conf->txtrig_bytes[index] ? conf->txtrig_bytes[index]
-		: -EOPNOTSUPP;
+	if (ctl->flags & (UART_FIFO_CTRL_FLAG_ENABLE_RX))
+		fcr |= UART_FCR_ENABLE_FIFO;
+
+	serial_out(up, UART_FCR, fcr);
+	up->fcr = fcr & ~(UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT);	
+	uart_port_unlock_irqrestore(&up->port, sl_flags);
+	return 0;
 }
 
-static int write_fcr_common(struct uart_8250_port *up, const struct uart_fifo_control *ctl, u8 fcr)
+static int port_16750_set_fifo_control(struct uart_8250_port *up, 
+								  const struct uart_fifo_control *ctl)
 {
-	unsigned long sl_flags;
+	int ret, fcr_rx_trig = 0;
+	u8 lcr = 0;
 
-	uart_port_lock_irqsave(&up->port, &sl_flags);
+	fcr_rx_trig = rx_trig_to_fcr(up, ctl->rx_trigger_bytes);
+	if (fcr_rx_trig < 0)
+		return fcr_rx_trig;
 
-	if (ctl->flags & (UART_FIFO_CTRL_FLAG_ENABLE_RX | UART_FIFO_CTRL_FLAG_ENABLE_TX))
-		fcr |= UART_FCR_ENABLE_FIFO;
+	/* set DLAB LCR[7] */
+	if (fcr_rx_trig & UART_FCR7_64BYTE) {
+		lcr = serial_in(up, UART_LCR);
+		serial_out(up, UART_LCR, lcr | UART_LCR_DLAB);
+	}
 
-	if (ctl->flags & UART_FIFO_CTRL_FLAG_FLUSH_RX)
-		fcr |= UART_FCR_CLEAR_RCVR;
+	ret = write_fcr_common(up, ctl, fcr_rx_trig);
 
-	if (ctl->flags & UART_FIFO_CTRL_FLAG_FLUSH_TX)
-		fcr |= UART_FCR_CLEAR_XMIT;
+	/* unset DLAB LCR[7] */
+	if (fcr_rx_trig & UART_FCR7_64BYTE) {
+		serial_out(up, UART_LCR, lcr); // Restore LCR
+	}
 
-	serial_out(up, UART_FCR, fcr);
-	fcr &= ~(UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT);
-	up->fcr = fcr;
-	uart_port_unlock_irqrestore(&up->port, sl_flags);
-	return 0;
+	return ret;
 }
 
 static int port_16550A_set_fifo_control(struct uart_8250_port *up, 
@@ -122,13 +132,12 @@ int serial8250_dispatch_set_fifo_control(struct uart_port *port,
 {
 	struct uart_8250_port *up = up_to_u8250p(port);
 
-	if (!port || !ctl)
-		return -EINVAL;
-
 	if (!(up->capabilities & UART_CAP_FIFO) || port->fifosize <= 1)
 		return -EOPNOTSUPP;
 
 	switch (port->type) {
+		case PORT_16750:
+			return port_16750_set_fifo_control(up, ctl);
 
 		case PORT_16650V2:
 			return port_16650V2_set_fifo_control(up, ctl);
diff --git a/drivers/tty/serial/8250/8250_port.c b/drivers/tty/serial/8250/8250_port.c
index ac938534a263..9c1563167d50 100644
--- a/drivers/tty/serial/8250/8250_port.c
+++ b/drivers/tty/serial/8250/8250_port.c
@@ -117,8 +117,14 @@ const struct serial8250_config serial8250_uart_config[] = {
 		.tx_loadsz	= 64,
 		.fcr		= UART_FCR_ENABLE_FIFO | UART_FCR_R_TRIG_10 |
 				  UART_FCR7_64BYTE,
-		.rxtrig_bytes	= {1, 16, 32, 56},
+		.rxtrig_bytes	= {1, 4, 8, 14, 1, 16, 32, 56},
 		.flags		= UART_CAP_FIFO | UART_CAP_SLEEP | UART_CAP_AFE,
+		.fifo_control = {
+			.flags 			  = UART_FIFO_CTRL_FLAG_ENABLE_RX | 
+							  	UART_FIFO_CTRL_FLAG_ENABLE_TX  ,
+			.rx_trigger_bytes = 32,	
+			.tx_trigger_bytes = 32,			
+		}
 	},
 	[PORT_STARTECH] = {
 		.name		= "Startech",
diff --git a/include/linux/serial_fifo.h b/include/linux/serial_fifo.h
index 4db0094f80f5..05b79315c525 100644
--- a/include/linux/serial_fifo.h
+++ b/include/linux/serial_fifo.h
@@ -11,6 +11,9 @@
 #define UART_FIFO_CTRL_FLAG_FLUSH_TX      (1 << 3)
 #define UART_FIFO_CTRL_FLAG_DMA_MODE      (1 << 4)
 
+/* TODO: refactor, remove rx enable(unused) and remove flush bits
+ * (Firstly it doesn't 'flush', and there's already a clear fifo method)
+ */
 struct uart_fifo_control {
 	__u64 flags;               /* Bitmask for enable/flush/options */
 	__u32 rx_trigger_bytes;    /* RX FIFO level */
-- 
2.48.1

